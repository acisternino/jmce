<?xml version="1.0"?>
<!-- build.xml - a Generic Ant buildfile -->
<project name="Java Buildfile" default="all" basedir=".">

	<!--
		Generic java packaged build for ant require
		the contrib and cpptasks installed.
	-->

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<taskdef resource="cpptasks.tasks"/>
	<typedef resource="cpptasks.types"/>

	<!-- Set the default value for the project -->
	<property name="project.name" value="JAVA" />
	<property name="project.debug" value="off" />
	<property name="project.xlint" value="-Xlint:all,-serial" />
	<property name="project.jar" value="${project.name}"/>
	<property name="project.args" value=""/>

	<property environment="env"/>
	<property name="java_home" value="${env.JAVA_HOME}"/>

	<condition property="xlint" value="-Xlint" else="-deprecation">
		<istrue value="${project.xlint}"/>
	</condition>

	<condition property="windows">
		<os family="windows"/>
	</condition>

	<condition property="platform" value="win32">
		<os family="windows"/>
	</condition>

	<condition property="unix">
		<os family="unix"/>
	</condition>

	<condition property="platform" value="linux">
		<os family="unix"/>
	</condition>

	<!-- The directory containing source code -->
	<property name="src.dir" value="src"/>
	<property name="lib.dir" value="lib"/>
	<property name="bin.dir" value="bin"/>
	<property name="contrib.dir" value="contrib"/>

	<!-- Temporary build directories -->
	<property name="build.base" value="build"/>
	<property name="build.dir" value="${build.base}/${platform}"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.jni" value="${build.dir}/jni"/>

	<path id="classpath.compile">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
			<exclude name="**/${project.jar}.jar"/>
		</fileset>
		<pathelement location="${build.classes}"/>
	</path>

	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${build.classes}"/>
	</path>

	<compiler id="cc.VisualC" name="msvc" if="windows">
		<includepath path="${java_home}/include"/>
		<includepath path="${java_home}/include/win32"/>
		<includepath path="${build.jni}"/>
		<defineset define="__WIN32__"/>
	</compiler>

	<linker id="linker.VisualC" name="msvc" if="windows"/>

	<compiler id="cc.unix" name="gcc" if="unix">
		<includepath path="${java_home}/include"/>
		<includepath path="${java_home}/include/linux"/>
		<includepath path="${build.jni}"/>
		<defineset define="__LINUX__"/>
		<defineset define="__NCURSES__"/>
	</compiler>

	<linker id="linker.unix" name="gcc" if="unix">
		<libset libs="ncurses"/>
	</linker>

	<!-- Target to create the build directories prior to the -->
	<!-- compile target. -->
	<target name="prepare">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${build.jni}"/>
	</target>

	<target name="clean" description="Removes all generated files.">
		<delete dir="${build.base}"/>
		<delete>
			<fileset dir="." includes="*.gz"/>
		</delete>
		<delete>
			<fileset dir="." includes="**/*.bak"/>
		</delete>
	</target>

	<target name="compile-image" description="Copy images files.">
		<copy todir="${build.classes}">
			<fileset dir="${src.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.jpg"/>
				<include name="**/*.png"/>
				<include name="**/*.bmp"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="get-revision">
		<exec executable="cp">
			<arg value="svnversion.txt"/>
			<arg value="conf/svnversion.properties"/>
		</exec>
		<exec executable="svnversion" append="true" output="conf/svnversion.properties">
			<arg value="."/>
		</exec>

		<loadproperties>
			<file file="conf/svnversion.properties"/>
		</loadproperties>

		<echo message="SVNVERSION  ${SVNVERSION}"/>
		<echo message="VERSION  ${VERSION}"/>
		<property name="project.version" value="${VERSION}"/>
		<property name="src.prefix" value="${project.name}-src-${project.version}"/>
		<property name="bin.prefix" value="${project.name}-bin-${project.version}"/>
	</target>


	<target name="compile-jni" if="project.jni">
		<javah destdir="${build.jni}" class="${project.jni}">
			<classpath refid="classpath"/>
		</javah>

		<cc outtype="shared" objdir="${build.jni}" outfile="${build.jni}/${project.jar}">
			<compiler refid="cc.VisualC"/>
			<linker refid="linker.VisualC"/>
			<compiler refid="cc.unix"/>
			<linker refid="linker.unix"/>
			<fileset dir="${src.dir}" includes="**/*.c"/>
		</cc>
	</target>

	<target name="compile-java" description="Compiles java source code.">
		<javac srcdir="${src.dir}" includes="**/*.java" deprecation="on" debug="${project.debug}" includeAntRunTime="false" destdir="${build.classes}">
			<classpath refid="classpath.compile"/>
			<compilerarg value="${xlint}"/>
		</javac>
	</target>

	<target name="compile" depends="prepare,compile-image,compile-java,compile-jni" description="Compiles all source code."/>

	<target name="jar" depends="compile,get-revision" description="Generates project jar file.">
		<jar jarfile="${build.lib}/${project.jar}.jar" basedir="${build.classes}">
			<fileset dir="conf">
				<include name="*.*"/>
				<exclude name="epsilon.ses"/>
				<exclude name="*.bak"/>
			</fileset>

			<manifest>
				<attribute name="ModuleType" value="${project.name}"/>
				<attribute name="Main-Class" value="${project.main}"/>
			</manifest>
		</jar>
	</target>

	<target name="dist-bin" description="Create binary distribution tar.gz file.">
		<tar destfile="${project.name}-bin-${project.version}.tar.gz" compression="gzip">
			<tarfileset dir="${bin.dir}" prefix="${bin.prefix}/bin">
				<exclude name=".svnignore"/>
				<include name="**/*.so"/>
				<include name="**/*.dll"/>
			</tarfileset>

			<tarfileset dir="${lib.dir}" prefix="${bin.prefix}/lib">
				<exclude name=".svnignore"/>
			</tarfileset>

			<tarfileset prefix="${bin.prefix}" file="${project.name}.bat"/>
			<tarfileset prefix="${bin.prefix}" file="${project.name}.sh"/>
			<tarfileset prefix="${bin.prefix}" file="readme.txt"/>
			<tarfileset prefix="${bin.prefix}" file="history.txt"/>
			<tarfileset prefix="${bin.prefix}" file="runall.bat"/>
			<tarfileset prefix="${bin.prefix}" file="runall.sh"/>
		</tar>
	</target>

	<target name="dist-src" description="Create source distribution tar.gz file.">
		<tar destfile="${project.name}-src-${VERSION}.tar.gz" compression="gzip">
			<tarfileset dir="${bin.dir}" prefix="${src.prefix}/bin">
				<exclude name="${project.name}.*"/>
				<exclude name=".svnignore"/>
				<include name="*.so"/>
				<include name="*.dll"/>
			</tarfileset>

			<tarfileset dir="${lib.dir}" prefix="${src.prefix}/lib">
				<exclude name="${project.name}.jar"/>
				<exclude name=".svnignore"/>
			</tarfileset>

			<tarfileset dir="${contrib.dir}" prefix="${src.prefix}/contrib">
				<exclude name=".svnignore"/>
			</tarfileset>

			<tarfileset prefix="${src.prefix}" file="${project.name}.bat"/>
			<tarfileset prefix="${src.prefix}" file="${project.name}.sh"/>
			<tarfileset prefix="${src.prefix}" file="build.xml"/>
			<tarfileset prefix="${src.prefix}" file="build-java.xml"/>
			<tarfileset prefix="${src.prefix}" file=".project"/>
			<tarfileset prefix="${src.prefix}" file=".classpath"/>
			<tarfileset prefix="${src.prefix}" file="readme.txt"/>

			<tarfileset dir="${src.dir}" prefix="${src.prefix}/src">
				<exclude name="**/Makefile"/>
				<exclude name="**/.svnignore"/>
			</tarfileset>
		</tar>
	</target>

	<target name="all" depends="jar,copy" description="Compiles, then builds the jar and shared file."/>

	<target name="config" description="Show project configuration.">
		<echo>project.name=${project.name}</echo>
		<echo>project.main=${project.main}</echo>
		<echo>project.lint=${project.lint}</echo>
	</target>

	<target name="copy">
		<copy todir="${lib.dir}">
			<fileset dir="${build.lib}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${bin.dir}/${platform}">
			<fileset dir="${build.jni}">
				<include name="*.dll"/>
				<include name="*.so"/>
			</fileset>
		</copy>
		<copy todir="${bin.dir}">
			<fileset dir="${build.jni}">
				<include name="*.dll"/>
				<include name="*.so"/>
			</fileset>
		</copy>
	</target>

	<target name="javadoc" description="Generate javadoc in docs directory">
		<javadoc sourcepath="${src.dir}" destdir="docs" windowtitle="${project.name} - ${VERSION}"
		         Header="${project.name} - ${VERSION}" Overview="${src.dir}/${project.name}/overview.html">
			<classpath refid="classpath"/>
		</javadoc>
	</target>

	<target name="run" description="Run the default target" depends="jar">
		<java classname="${project.main}" fork="yes" args="${project.args}">
			<classpath refid="classpath"/>
		</java>
	</target>
</project>
